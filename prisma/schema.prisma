generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Products {
  productId    String    @id @default(cuid())
  productName  String    @unique
  productStock Int       @default(0)
  userId       String
  userName     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt()
  supplierName String
  supplierId   String
  supplier     Suppliers @relation(fields: [supplierId], references: [supplierId], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([supplierId])
}

model Suppliers {
  supplierId      String     @id @default(cuid())
  supplierName    String     @unique
  supplierEmail   String     @unique
  supplierAddress String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime?  @updatedAt()
  userId          String
  userName        String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  products        Products[]

  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id         String       @id @default(cuid())
  name       String
  email      String       @unique
  password   String
  image      String       @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime?    @updatedAt()
  sessions   Session[]
  products   Products[]
  suppliers  Suppliers[]
  LoginToken LoginToken[]

  @@unique([id])
}

model LoginToken {
  id         String   @id @default(cuid())
  sequenceId String   @default("0")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@index([userId])
}
